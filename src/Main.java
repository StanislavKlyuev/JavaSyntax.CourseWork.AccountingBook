public class Main {
    public static void main(String[] args) {

        /* Задание. Книга сотрудников
        Ваша задача — помочь отделу кадров и бухгалтерии автоматизировать процессы. Напишите программу, которая занимается учетом сотрудников и позволяет:
        - получить список всех сотрудников;
        - подсчитать среднее значение зарплат;
        - подсчитать налоги;
        - проиндексировать зарплаты;
        - найти сотрудников по разным бизнес-критериям.
                Последовательность шагов для выполнения задания
        1. Создайте класс Employee с информацией о Ф. И. О., отделе и зарплате сотрудника.
           Для простоты назовите отделы от 1 до 5. Зарплату задайте в интервале 50–450.
        2. Добавьте статическую переменную-счетчик, которая будет отвечать за  id.
        3. Добавьте в класс Employee поле id. Оно переносится из счетчика, и затем счетчик увеличивает свое значение.
        4. Скройте прямой доступ к полям класса Employee, добавьте возможность получать значения полей (геттеры) и
           устанавливать значения полей отдела и зарплаты (сеттеры).
        5. Реализуйте в классе Employee контракт equals.
           Для бухгалтерского учета сравнение должно проходить только по значению зарплаты.
        6. Реализуйте в классе Employee методы вывода информации о сотруднике. Вывод всех данных — через переопределение
           метода toString, вывод только имени и зарплаты — через вызов System.out.println в отдельном методе public void printShortInfo().
           По умолчанию все поля, кроме id, должны передаваться через конструктор. Также все поля (включая id, который
           нужно получить из счетчика) должны заполняться в конструкторе.
        7. Создайте класс EmployeeBook c полем типа Employee[10], которое будет выполнять роль хранилища для записей о сотрудниках.
        8. Создайте методы класса EmployeeBook, которые будут взаимодействовать с массивом из пункта 7 и возвращать результат:
            - Получить список всех сотрудников со всеми данными о них, вывести в консоль значения всех полей, кроме Null.
              Используйте цикл for each и toString.
            - Подсчитать среднее значение зарплат.
              В качестве количества сотрудников для подсчета среднего используйте количество полей до первого null.
            - Вывести значения налогов.
              Их можно считать по двум схемам: PROPORTIONAL и PROGRESSIVE.
              Если в метод передать строкой тип расчета PROPORTIONAL, то налог всегда 13%.
              Если передать PROGRESSIVE, то налог рассчитывается по формуле: «13% для зарплаты до 150, 17% для зарплаты до 350,
              21% для зарплаты выше 350». Примените switch для выбора формулы расчета зарплаты.
            - Получить в качестве параметра номер отдела (1–5) и проиндексировать зарплату всех сотрудников отдела на процент,
              который приходит в качестве параметра (то есть вызвать изменение зарплаты у всех сотрудников на величину аргумента в процентах).
              Примените continue для пропуска сотрудников, зарплата которых не меняется.
            - Получить в качестве параметра номер отдела (1–5) и цифру зарплаты и вывести первого сотрудника этого отдела
              с зарплатой больше указанной вместе с порядковым номером в списке.
              Используйте цикл for и оператор break для поиска. В выводе используйте метод printShortInfo() из пункта 6.
            - Получить в качестве параметра цифру зарплаты wage и число сотрудников employeeNumber и вывести первые
              employeeNumber сотрудников с зарплатой меньше wage.
              Используйте для поиска цикл while и оператор break.
            - Получить в качестве параметра объект сотрудника и вернуть boolean, есть ли такой сотрудник в массиве
              с точки зрения бухгалтерского учета (по зарплате) или нет.
              Сравнение проводится через equals.
        9. Добавьте метод наполнения EmployeeBook, метод должен найти свободную ячейку в массиве и положить в нее данные нового сотрудника.
           Поиск свободных ячеек происходит с начала массива. Если свободных мест для сотрудника нет, метод возвращает false.
           Если для сотрудника нашлось место, метод возвращает true.
        10. Добавьте метод для получения сотрудника по id.
        11. Проинициализируйте в main объект класса EmployeeBook и наполните его через метод добавления нового сотрудника —
            вызовите метод 11 раз, выведите результат исполнения метода на экран.
        12. Проверьте корректность работы всех методов.*/

        // создаем новую книгу (массив) учета сотрудников
        EmployeeBook.setEmployees(10);

        // добавляем в книгу новых сотрудников
        EmployeeBook.addEmployee("Макаров", "Александр", "Семенович", 1, 50);
        EmployeeBook.addEmployee("Иванов", "Олег", "Иванович", 1, 505);
        EmployeeBook.addEmployee("Петров", "Иван", "Петрович", 2, 180);
        EmployeeBook.addEmployee("Сидоров", "Петр", "Олегович", 3, 300);
        EmployeeBook.addEmployee("Костин", "Илья", "Алексеевич", 4, 350);
        EmployeeBook.addEmployee("Гагарин", "Юрий", "Максимович", 5, 400);
        EmployeeBook.addEmployee("Максимов", "Алексей", "Викторович", 3, 70);
        EmployeeBook.addEmployee("Морозов", "Дмитрий", "Витальевич", 2, 230);
        EmployeeBook.addEmployee("Воронин", "Станислав", "Юрьевич", 5, 320);
        EmployeeBook.addEmployee("Марков", "Илья", "Николаевич", 4, 430);

        System.out.println();

        // Выводим список всех сотрудников
        EmployeeBook.printAllEmployees();

        System.out.println();

        // Добавим еще одного сотрудника
        EmployeeBook.addEmployee("Смирнов", "Илья", "Николаевич", 4, 430);

        System.out.println();

        //выводим среднее значение зарплат
        EmployeeBook.printAverageSalary();

        System.out.println();

        //Выводим значения налога
        String tax = "PROPORTIONAL"; // PROPORTIONAL или PROGRESSIVE
        EmployeeBook.printTax(tax);

        System.out.println();

        //Индексируем зарплату сотрудникам отдела dep на величину ind
        int dep = 1;
        int ind = 10;
        EmployeeBook.getDept(dep, ind);  //

        System.out.println();

        // вывод первого сотрудника отдела dep с зарплатой выше порога vol
        dep = 1;
        int vol = 75;
        EmployeeBook.getEmploy(dep, vol);

        System.out.println();

        // вывод employeeNumber сотрудников c зарплатой ниже порога wage
        int employeeNumber = 2;
        int wage = 400;
        EmployeeBook.getLowEmployees(wage, employeeNumber);

        System.out.println();

        // получаем объект сотрудника и проверяем его по бух учету
        Employee ilya = new Employee("Смирнов", "Илья", "Николаевич", 4, 431);
        boolean have = EmployeeBook.findEmployee(ilya);
        System.out.println(have);

        System.out.println();

        //Получаем сотрудника по id
        int id = 3;
        Employee empl = EmployeeBook.getEmployeeId(id);
        System.out.println(empl);
    }
}